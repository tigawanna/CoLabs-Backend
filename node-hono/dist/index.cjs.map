{"version":3,"sources":["../src/index.ts","../src/env.ts","../node_modules/.pnpm/@scalar+hono-api-reference@0.5.165_hono@4.6.14/node_modules/@scalar/hono-api-reference/dist/honoApiReference.js","../src/routes/home/index.ts","../src/utils/errors.ts","../src/routes/projects/main.ts","../src/routes/projects/index/get/route.ts","../src/db/schema/project.ts","../src/db/helpers/columns.ts","../src/db/schema/users.ts","../src/utils/schema/response.ts","../src/routes/projects/schemas.ts","../src/db/client.ts","../src/db/helpers/query-logger.ts","../src/routes/projects/index/get/handler.ts","../src/routes/projects/index/post/route.ts","../src/routes/projects/index/post/handler.ts"],"sourcesContent":["import { serve } from \"@hono/node-server\";\nimport { envVariables } from \"./env.js\";\nimport { Hono } from \"hono\";\nimport { openAPISpecs } from \"hono-openapi\";\nimport { apiReference } from \"@scalar/hono-api-reference\";\nimport { swaggerUI } from \"@hono/swagger-ui\";\nimport { homeRoute } from \"./routes/home/index.js\";\nimport { projectsRoute } from \"./routes/projects/main.js\";\n\n\n\nconst app = new Hono();\n\n\napp.route(\"/\",homeRoute)\napp.route(\"/projects\", projectsRoute);\n// app.route(\"/projects\", projectsGetRoute);\n// app.route(\"/projects\", projectsPostRoute);\n\n\nconst port = envVariables.port || 5000;\nconsole.log(`Server is running on http://localhost:${port}`);\napp.get(\n  \"/openapi\",\n  openAPISpecs(app, {\n    documentation: {\n      info: { title: \"Collabs Backend API\", version: \"1.0.0\", description: \"Collabs Nodejs Backend Backend\" },\n      servers: [{ url: `http://localhost:${port}`, description: \"Local Server\" }],\n    },\n  })\n);\n\napp.get(\n  \"/docs\",\n  apiReference({\n    theme: \"saturn\",\n    spec: { url: \"/openapi\" },\n  })\n);\n\napp.get(\"/swagger\", swaggerUI({ url: \"/openapi\" }));\n\nserve({\n  fetch: app.fetch,\n  port,\n});\n","import \"dotenv/config\";\nimport { z } from \"zod\";\n\nexport const env = {\n  port: parseInt(process.env.PORT || \"3000\"),\n  dbUrl: process.env.DATABASE_URL,\n  NODE_ENV: process.env.NODE_ENV,\n};\n\nconst envScheme = z.object({\n  port: z.number(),\n  dbUrl: z.string(),\n  NODE_ENV: z.enum([\"development\", \"test\", \"production\"]),\n});\n\nexport const envVariables = envScheme.parse(env);\n","import { html, raw } from 'hono/html';\n\n/**\n * The custom theme CSS for the API Reference.\n */\nconst customThemeCSS = `\n.light-mode {\n  color-scheme: light;\n  --scalar-color-1: #2a2f45;\n  --scalar-color-2: #757575;\n  --scalar-color-3: #8e8e8e;\n  --scalar-color-disabled: #b4b1b1;\n  --scalar-color-ghost: #a7a7a7;\n  --scalar-color-accent: #0099ff;\n  --scalar-background-1: #fff;\n  --scalar-background-2: #f6f6f6;\n  --scalar-background-3: #e7e7e7;\n  --scalar-background-4: rgba(0, 0, 0, 0.06);\n  --scalar-background-accent: #8ab4f81f;\n\n  --scalar-border-color: rgba(0, 0, 0, 0.1);\n  --scalar-scrollbar-color: rgba(0, 0, 0, 0.18);\n  --scalar-scrollbar-color-active: rgba(0, 0, 0, 0.36);\n  --scalar-lifted-brightness: 1;\n  --scalar-backdrop-brightness: 1;\n\n  --scalar-shadow-1: 0 1px 3px 0 rgba(0, 0, 0, 0.11);\n  --scalar-shadow-2: rgba(0, 0, 0, 0.08) 0px 13px 20px 0px,\n    rgba(0, 0, 0, 0.08) 0px 3px 8px 0px, #eeeeed 0px 0 0 1px;\n\n  --scalar-button-1: rgb(49 53 56);\n  --scalar-button-1-color: #fff;\n  --scalar-button-1-hover: rgb(28 31 33);\n\n  --scalar-color-green: #069061;\n  --scalar-color-red: #ef0006;\n  --scalar-color-yellow: #edbe20;\n  --scalar-color-blue: #0082d0;\n  --scalar-color-orange: #fb892c;\n  --scalar-color-purple: #5203d1;\n}\n\n.dark-mode {\n  color-scheme: dark;\n  --scalar-color-1: rgba(255, 255, 245, .86);\n  --scalar-color-2: rgba(255, 255, 245, .6);\n  --scalar-color-3: rgba(255, 255, 245, .38);\n  --scalar-color-disabled: rgba(255, 255, 245, .25);\n  --scalar-color-ghost: rgba(255, 255, 245, .25);\n  --scalar-color-accent: #e36002;\n  --scalar-background-1: #1e1e20;\n  --scalar-background-2: #2a2a2a;\n  --scalar-background-3: #505053;\n  --scalar-background-4: rgba(255, 255, 255, 0.06);\n  --scalar-background-accent: #e360021f;\n\n  --scalar-border-color: rgba(255, 255, 255, 0.1);\n  --scalar-scrollbar-color: rgba(255, 255, 255, 0.24);\n  --scalar-scrollbar-color-active: rgba(255, 255, 255, 0.48);\n  --scalar-lifted-brightness: 1.45;\n  --scalar-backdrop-brightness: 0.5;\n\n  --scalar-shadow-1: 0 1px 3px 0 rgb(0, 0, 0, 0.1);\n  --scalar-shadow-2: rgba(15, 15, 15, 0.2) 0px 3px 6px,\n    rgba(15, 15, 15, 0.4) 0px 9px 24px, 0 0 0 1px rgba(255, 255, 255, 0.1);\n\n  --scalar-button-1: #f6f6f6;\n  --scalar-button-1-color: #000;\n  --scalar-button-1-hover: #e7e7e7;\n\n  --scalar-color-green: #3dd68c;\n  --scalar-color-red: #f66f81;\n  --scalar-color-yellow: #f9b44e;\n  --scalar-color-blue: #5c73e7;\n  --scalar-color-orange: #ff8d4d;\n  --scalar-color-purple: #b191f9;\n}\n/* Sidebar */\n.light-mode .t-doc__sidebar {\n  --scalar-sidebar-background-1: var(--scalar-background-1);\n  --scalar-sidebar-item-hover-color: currentColor;\n  --scalar-sidebar-item-hover-background: var(--scalar-background-2);\n  --scalar-sidebar-item-active-background: var(--scalar-background-accent);\n  --scalar-sidebar-border-color: var(--scalar-border-color);\n  --scalar-sidebar-color-1: var(--scalar-color-1);\n  --scalar-sidebar-color-2: var(--scalar-color-2);\n  --scalar-sidebar-color-active: var(--scalar-color-accent);\n  --scalar-sidebar-search-background: var(--scalar-background-2);\n  --scalar-sidebar-search-border-color: var(--scalar-sidebar-border-color);\n  --scalar-sidebar-search-color: var(--scalar-color-3);\n}\n\n.dark-mode .sidebar {\n  --scalar-sidebar-background-1: #161618;\n  --scalar-sidebar-item-hover-color: var(--scalar-color-accent);\n  --scalar-sidebar-item-hover-background: transparent;\n  --scalar-sidebar-item-active-background: transparent;\n  --scalar-sidebar-border-color: transparent;\n  --scalar-sidebar-color-1: var(--scalar-color-1);\n  --scalar-sidebar-color-2: var(--scalar-color-2);\n  --scalar-sidebar-color-active: var(--scalar-color-accent);\n  --scalar-sidebar-search-background: #252529;\n  --scalar-sidebar-search-border-color: transparent;\n  --scalar-sidebar-search-color: var(--scalar-color-3);\n}\n`;\n/**\n * The HTML to load the @scalar/api-reference JavaScript package.\n */\nconst javascript = (configuration) => {\n    const defaultConfiguration = {\n        _integration: 'hono',\n    };\n    return html `\n    <script\n      id=\"api-reference\"\n      type=\"application/json\"\n      data-configuration=\"${JSON.stringify({\n        ...defaultConfiguration,\n        ...configuration,\n    })\n        .split('\"')\n        .join('&quot;')}\">\n      ${raw(configuration.spec?.content\n        ? typeof configuration.spec?.content === 'function'\n            ? JSON.stringify(configuration.spec?.content())\n            : JSON.stringify(configuration.spec?.content)\n        : '')}\n    </script>\n    <script src=\"${configuration.cdn ||\n        'https://cdn.jsdelivr.net/npm/@scalar/api-reference'}\"></script>\n  `;\n};\n/**\n * The middleware for the API Reference.\n */\nconst apiReference = (options) => async (c) => {\n    return c.html(/* html */ `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>${options?.pageTitle ?? 'API Reference'}</title>\n          <meta charset=\"utf-8\" />\n          <meta\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1\" />\n          <style>\n            ${options.theme ? null : customThemeCSS}\n          </style>\n        </head>\n        <body>\n          ${javascript(options)}\n        </body>\n      </html>\n    `);\n};\n\nexport { apiReference, customThemeCSS, javascript };\n","import { resolver, validator as ZodValidator } from \"hono-openapi/zod\";\nimport { describeRoute } from \"hono-openapi\";\nimport { z } from \"zod\";\nimport { Hono } from \"hono\";\nimport { returnValidationData } from \"@/utils/errors.js\";\n\nconst responseSchema = z.object({\n  message: z.string(),\n});\nconst paramsSchema = z.object({\n  name: z.string(),\n});\nconst app = new Hono();\n\napp.get(\n  \"/\",\n  describeRoute({\n    description: \"Say hello to the user\",\n\n    responses: {\n      200: {\n        description: \"Successful response\",\n        content: {\n          \"text/plain\": { schema: resolver(responseSchema) },\n        },\n      },\n    },\n  }),\n  ZodValidator(\"query\", paramsSchema, (hook, c) => {\n    console.log(\"=== h===\", hook);\n    if (!hook.success) {\n      return c.json(\n        { message:\"incorrect query parameters\",code: 400, data: returnValidationData(hook.error) },\n        400\n      );\n    }\n  }),\n  (c) => {\n    const query = c.req.valid(\"query\");\n    return c.text(`Hello ${query?.name ?? \"Hono\"}!`);\n  }\n);\n\nexport { app as homeRoute };\n","import { z } from \"@hono/zod-openapi\";\n\n// deno-lint-ignore no-explicit-any\nexport function parseZodError(errorResponse: z.ZodError<any>) {\n  const issues = errorResponse.issues;\n  const errors = issues.reduce((acc: Record<string, string>, issue) => {\n    acc[issue.path.join(\".\")] = issue.message;\n    return acc;\n  }, {});\n  return errors;\n}\n\nexport function returnValidationData(errorResponse: z.ZodError) {\n  const issues = errorResponse.issues;\n  const errors = issues.reduce(\n    (acc: Record<string, { code: \"validation_failed\"; message: string }>, issue) => {\n      acc[issue.path.join(\".\")] = { code: \"validation_failed\", message: issue.message };\n      return acc;\n    },\n    {}\n  );\n  return errors;\n}\n","import { Hono } from \"hono\";\nimport { projectsGetRoute } from \"./index/get/route.js\";\nimport { projectsPostRoute } from \"./index/post/route.js\";\n\nconst app = new Hono();\n\napp.route(\"/\", projectsGetRoute);\napp.route(\"/\", projectsPostRoute);\n\nexport { app as projectsRoute };\n","import { returnValidationData } from \"@/utils/errors.js\";\nimport { Hono } from \"hono\";\nimport { describeRoute } from \"hono-openapi\";\nimport { resolver, validator } from \"hono-openapi/zod\";\nimport { ListProjectsErrorSchema, ListProjectsSchema, ProjectsParamsSchema } from \"@/routes/projects/schemas.js\";\nimport { getProjectsWithCollaborators } from \"./handler.js\";\n\nconst app = new Hono();\n\napp.get(\n  \"/\",\n  describeRoute({\n    description: \"get projects with collaborators\",\n    responses: {\n      200: {\n        content: {\n          \"application/json\": {\n            schema: resolver(ListProjectsSchema),\n          },\n        },\n        description: \"projects with collaborators retrieved\",\n      },\n      400: {\n        content: {\n          \"application/json\": {\n            schema: resolver(ListProjectsErrorSchema),\n          },\n        },\n        description: \"Bad request parameters\",\n      },\n      500: {\n        content: {\n          \"application/json\": {\n            schema: resolver(ListProjectsErrorSchema),\n          },\n        },\n        description: \"Internal error fetching projects\",\n      },\n    },\n  }),\n  validator(\"query\", ProjectsParamsSchema, (hook, c) => {\n    if (!hook.success) {\n      return c.json(\n        {\n          message: \"incorrect query parameters\",\n          code: 400,\n          data: returnValidationData(hook.error),\n        },\n        400\n      );\n    }\n  }),\n  (c) => {\n    return getProjectsWithCollaborators(c);\n  }\n);\n\nexport { app as projectsGetRoute };\n","import {\n  pgTable,\n  varchar,\n  integer,\n  pgEnum,\n  jsonb,\n  text,\n  timestamp,\n  primaryKey,\n  unique,\n  index,\n} from \"drizzle-orm/pg-core\";\nimport { commonColumns } from \"../helpers/columns.js\";\nimport { usersTable } from \"./users.js\";\nimport { relations } from \"drizzle-orm\";\n\n\nconst projectType = [\"private\", \"open-source\"] as const;\nconst platforms = [\"web\", \"mobile\", \"desktop\"] as const;\n\nexport const projectTypeEnum = pgEnum(\"project_type\", projectType);\nexport const platformEnum = pgEnum(\"platform\", platforms);\n\nexport const projectsTable = pgTable(\"projects\", {\n  ...commonColumns,\n  title: varchar({ length: 255 }).unique().notNull(),\n  description: varchar({ length: 255 }).notNull(),\n  owner: text()\n    .references(() => usersTable.id)\n    .notNull(),\n  type: projectTypeEnum().default(\"open-source\"),\n  platform: platformEnum().default(\"web\"),\n  compensation: jsonb().default({\n    monetization_type: \"Non-monetized\",\n  }),\n  link: varchar({ length: 255 }),\n  // counts\n  //  these values don't need to be saved in the database and can be derived from the github api\n  languages: varchar({ length: 255 }).notNull(),\n  issuesCount: integer().default(0),\n  forksCount: integer().default(0),\n  starCount: integer().default(0),\n  lastCommitDate: timestamp({ withTimezone: true, mode: \"string\" }).defaultNow(),\n\n},(t) => [{\n  index: index().on(t.owner, t.title)\n}]\n);\n\nexport const projectCollaboratorsTable = pgTable(\n  \"projects_collaborators\",\n  {\n    ...commonColumns,\n    project_id: text()\n      .references(() => projectsTable.id)\n      .notNull(),\n    user_id: text()\n      .references(() => usersTable.id)\n      .notNull(),\n  },\n  // composite primary key\n  (t) => [\n    {\n      pk: primaryKey({ columns: [t.user_id, t.project_id] }),\n      unq: unique().on(t.user_id, t.project_id),\n    },\n  ]\n);\n\nexport const projectsTableRelations = relations(projectsTable, ({ one,many }) => ({\n  owner: one(usersTable, {\n    fields: [projectsTable.owner],\n    references: [usersTable.id],\n  }),\n  collaborators: many(projectCollaboratorsTable),\n}));\n\nexport const projectCollaboratorsTableRelations = relations(\n  projectCollaboratorsTable,\n  ({ one }) => ({\n    project: one(projectsTable, {\n      fields: [projectCollaboratorsTable.project_id],\n      references: [projectsTable.id],\n    }),\n    user: one(usersTable, {\n      fields: [projectCollaboratorsTable.user_id],\n      references: [usersTable.id],\n    }),\n  })\n)\n\n","import { timestamp, text } from \"drizzle-orm/pg-core\";\nimport { uuidv7 } from \"uuidv7\";\nexport const commonColumns = {\n  id: text()\n    .$defaultFn(() => uuidv7())\n    .primaryKey(),\n  updated_at: timestamp(),\n  created_at: timestamp().defaultNow()\n};\n","import { pgTable, varchar } from \"drizzle-orm/pg-core\";\nimport { commonColumns } from \"../helpers/columns.js\";\nimport { relations } from \"drizzle-orm\";\nimport { projectsTable } from \"./project.js\";\n\nexport const usersTable = pgTable(\"users\", {\n  ...commonColumns,\n  name: varchar({ length: 255 }).notNull(),\n  email: varchar({ length: 255 }).notNull().unique(),\n});\n\n\nexport const usersTableRElations = relations(usersTable, ({ one }) => ({\n  projects:one(projectsTable,{\n    fields: [usersTable.id],\n    references: [projectsTable.owner],\n  }),\n  \n}))\n","import { z } from \"@hono/zod-openapi\";\n\nconst errorMessageEnums = [\n  \"validation_failed\",\n  \"authorization_required\",\n  \"internal_server_error\",\n  \"not_found\",\n  \"conflict\",\n] as const;\n\nexport const baseErrorSchema = z.object({\n  code: z.number().openapi({\n    example: 400,\n  }),\n  message: z.string().openapi({\n    example: \"Bad Request\",\n  }),\n  data: z\n    .record(\n      z.string(),\n      z.object({\n        message: z.string().openapi({\n          example: \"Bad Request\",\n        }),\n        code: z.enum(errorMessageEnums).openapi({\n          example: \"validation_failed\",\n        }),\n      })\n    )\n    .optional()\n    .default({}),\n});\nexport const baseRecordSchema = z\n  .object({\n    id: z.string(),\n    created_at: z.string(),\n    updated_at: z.string().nullable(),\n  })\n  .and(z.record(z.string(), z.any()));\n\nexport const listResponseBodySchema = z.object({\n  page: z.number(),\n  perPage: z.number(),\n  totalItems: z.number(),\n  totalPages: z.number(),\n  items: z.array(baseRecordSchema),\n});\n\nexport const listResponseParamsSchema = z.object({\n  page: z.string().optional().default(\"1\"),\n  perPage: z.string().default(\"12\").optional(),\n});\n","import { projectsTable } from \"@/db/schema/project.js\";\nimport {\n  baseErrorSchema,\n  listResponseBodySchema,\n  listResponseParamsSchema,\n} from \"@/utils/schema/response.js\";\nimport { createSelectSchema, createUpdateSchema, createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const SelectDBProjectSchema = createSelectSchema(projectsTable).extend({\n  \n  compensation: z.union([\n    z.object({\n      monetization_type: z.literal(\"Monetized\"),\n      amount: z.number(),\n      currency: z.string(),\n      frequency: z.enum([\"Per Hour\", \"Per Month\", \"Per Milestone\", \"Per Project\"]),\n      duration: z.number(),\n    }),\n    z.object({\n      monetization_type: z.literal(\"Non-monetized\"),\n    }),\n  ]),\n});\n\nexport const UpdateDBProjectSchema = createUpdateSchema(projectsTable).extend({\n  compensation: z.union([\n    z.object({\n      monetization_type: z.literal(\"Monetized\"),\n      amount: z.number(),\n      currency: z.string(),\n      frequency: z.enum([\"Per Hour\", \"Per Month\", \"Per Milestone\", \"Per Project\"]),\n      duration: z.number(),\n    }),\n    z.object({\n      monetization_type: z.literal(\"Non-monetized\"),\n    }),\n  ]),\n});\n\nexport const InsertDBProjectSchema = createInsertSchema(projectsTable).extend({\n  compensation: z.union([\n    z.object({\n      monetization_type: z.literal(\"Monetized\"),\n      amount: z.number(),\n      currency: z.string(),\n      frequency: z.enum([\"Per Hour\", \"Per Month\", \"Per Milestone\", \"Per Project\"]),\n      duration: z.number(),\n    }),\n    z.object({\n      monetization_type: z.literal(\"Non-monetized\"),\n    }),\n  ]),\n});\n\nexport const ProjectsParamsSchema = listResponseParamsSchema.extend({});\n\nexport const ListProjectsSchema = listResponseBodySchema.extend({\n  items: SelectDBProjectSchema.array(),\n});\n\nexport const ListProjectsErrorSchema = baseErrorSchema.extend({});\n\nexport const InsertProjectsErrorSchema = baseErrorSchema.extend({});\n","import { drizzle } from \"drizzle-orm/node-postgres\";\nimport pg from \"pg\";\nimport * as userSchema from \"./schema/users.js\";\nimport * as projectSchema from \"./schema/project.js\";\nimport type { Logger } from \"drizzle-orm/logger\";\nimport { formatSqlQuery } from \"./helpers/query-logger.js\";\nimport { envVariables } from \"@/env.js\";\n\nclass MyLogger implements Logger {\n  logQuery(query: string, params: unknown[]): void {\n    console.log(\"=== DRIZZLE QUERY ===\");\n    console.log(`%c${formatSqlQuery(query)}`, \"color:cyan\");\n    if (params && params.length > 0) {\n      console.log(\"=== DRIZZLE PARAMS ===\");\n      console.log(`%c${JSON.stringify(params)}`, \"color:blue\");\n    }\n  }\n}\n\n// Use pg driver.\nconst { Pool } = pg;\n// Instantiate Drizzle client with pg driver and schema.\nexport const db = drizzle({\n  client: new Pool({\n    connectionString: envVariables.dbUrl,\n  }),\n  schema: { ...userSchema, ...projectSchema },\n  logger: envVariables.NODE_ENV === \"development\"?new MyLogger():false,\n});\n","export function formatSqlQuery(query: string): string {\n  const keywords = [\n    \"SELECT\",\n    \"FROM\",\n    \"WHERE\",\n    \"LEFT JOIN\",\n    \"RIGHT JOIN\",\n    \"INNER JOIN\",\n    \"OUTER JOIN\",\n    \"ON\",\n    \"AND\",\n    \"OR\",\n    \"GROUP BY\",\n    \"ORDER BY\",\n    \"HAVING\",\n    \"LIMIT\",\n    \"OFFSET\",\n    \"LATERAL\",\n    \"COALESCE\",\n    \"JSON_AGG\",\n    \"JSON_BUILD_ARRAY\",\n  ];\n\n  let formattedQuery = query.replace(/\\s+/g, \" \").trim();\n\n  formattedQuery = formattedQuery.replace(/\"([^\"]+)\"/g, (match) => {\n    return match.replace(/\\s+/g, \"_SPACE_\");\n  });\n\n  formattedQuery = formattedQuery.replace(/\\bSELECT\\b/i, \"SELECT\\n\");\n\n  keywords.forEach((keyword) => {\n    if (keyword !== \"SELECT\") {\n      const regex = new RegExp(`\\\\b${keyword}\\\\b`, \"gi\");\n      formattedQuery = formattedQuery.replace(regex, `\\n${keyword}`);\n    }\n  });\n\n  // Add newline after every comma\n  formattedQuery = formattedQuery.replace(/,/g, \",\\n\");\n\n  formattedQuery = formattedQuery.replace(/_SPACE_/g, \" \");\n\n  const lines = formattedQuery.split(\"\\n\");\n  let indentLevel = 0;\n  formattedQuery = lines\n    .map((line) => {\n      line = line.trim();\n\n      if (line.startsWith(\")\")) {\n        indentLevel = Math.max(0, indentLevel - 1);\n      }\n\n      const indentedLine = \"  \".repeat(indentLevel) + line;\n\n      if (line.includes(\"(\") && !line.includes(\")\")) {\n        indentLevel++;\n      }\n\n      return indentedLine;\n    })\n    .join(\"\\n\");\n\n  return formattedQuery;\n};\n\n\n","import { db } from \"@/db/client.js\";\nimport { projectsTable } from \"@/db/schema/project.js\";\nimport type { Context } from \"hono\";\nimport { z } from \"zod\";\n\ntype ContextInput = {\n  in: {\n    query: {\n      page?: string | undefined;\n      perPage?: string | undefined;\n    };\n  };\n  out: {\n    query: {\n      page: string;\n      perPage?: string | undefined;\n    };\n  };\n};\nexport async function getProjectsWithCollaborators(c: Context<{}, \"/\", ContextInput>) {\n  try {\n    const page = Number(c.req.query().page);\n    const perPage = Number(c.req.query().perPage);\n    const skip = (page - 1) * perPage;\n    const totalItems = await db.$count(projectsTable);\n    const totalPages = Math.ceil(totalItems / perPage);\n    const projects: any[] = await db.query.projectsTable.findMany({\n      limit: perPage,\n      offset: skip,\n      with: {\n        collaborators: {\n          limit: 5,\n        },\n      },\n    });\n    return c.json(\n      {\n        page,\n        perPage,\n        totalItems,\n        totalPages,\n        items: projects,\n      },\n      200\n    );\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return c.json(\n        {\n          message: error.message,\n          code: 400,\n          data: {\n            name: {\n              message: \"Something went wrong\",\n              code: \"authorization_required\",\n            } as const,\n          },\n        },\n        400\n      );\n    }\n    return c.json(\n      {\n        message: \"Something went wrong\",\n        code: 500,\n        data: {\n          name: {\n            message: \"Something went wrong\",\n            code: \"authorization_required\",\n          } as const,\n        },\n      },\n      500\n    );\n  }\n}\n","import { returnValidationData } from \"@/utils/errors.js\";\nimport { Hono } from \"hono\";\nimport { describeRoute } from \"hono-openapi\";\nimport { resolver, validator } from \"hono-openapi/zod\";\nimport { InsertDBProjectSchema, InsertProjectsErrorSchema, SelectDBProjectSchema } from \"@/routes/projects/schemas.js\"\nimport { createProject } from \"./handler.js\";\n\nconst app = new Hono();\n\napp.post(\n  \"/\",\n  describeRoute({\n    description: \"add a project\",\n    responses: {\n      200: {\n        content: {\n          \"application/json\": {\n            schema: resolver(SelectDBProjectSchema),\n          },\n        },\n        description: \"New project added\",\n      },\n      400: {\n        content: {\n          \"application/json\": {\n            schema: resolver(InsertProjectsErrorSchema),\n          },\n        },\n        description: \"Bad request parameters\",\n      },\n      500: {\n        content: {\n          \"application/json\": {\n            schema: resolver(InsertProjectsErrorSchema),\n          },\n        },\n        description: \"Internal error\",\n      },\n    },\n  }),\n  validator(\"json\", InsertDBProjectSchema, (hook, c) => {\n    if (!hook.success) {\n      return c.json(\n        {\n          message: \"incorrect body parameters\",\n          code: 400,\n          data: returnValidationData(hook.error),\n        },\n        400\n      );\n    }\n  }),\n  (c) => {\n    return createProject(c);\n  }\n);\n\nexport { app as projectsPostRoute };\n","import { db } from \"@/db/client.js\";\nimport { projectsTable } from \"@/db/schema/project.js\";\nimport { returnValidationData } from \"@/utils/errors.js\";\nimport type { Context } from \"hono\";\nimport { z } from \"zod\";\nimport { InsertDBProjectSchema } from \"@/routes/projects/schemas.js\";\n\ntype Project = z.infer<typeof InsertDBProjectSchema>;\ntype ContextInput = {\n  in: {\n    json: Project;\n  };\n  out: {\n    json: Project;\n  };\n};\nexport async function createProject(c: Context<{}, \"/\", ContextInput>) {\n  try {\n    const bodyValues = await c.req.json();\n    const project = await db.insert(projectsTable).values(bodyValues).returning();\n    return c.json(project, 200);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const valError = returnValidationData(error);\n      console.log({ valError });\n      return c.json(\n        {\n          message: error.message,\n          code: 400,\n          data: valError,\n        },\n        400\n      );\n    }\n    return c.json(\n      {\n        message: \"Something went wrong\",\n        code: 500,\n        data: {\n          name: {\n            message: (error as any)?.message,\n            code: \"internal_server_error\",\n          } as const,\n        },\n      },\n      500\n    );\n  }\n}\n"],"mappings":"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","names":["import_hono","import_hono_openapi","import_zod","ZodValidator","import_hono","import_hono","import_hono_openapi","import_zod","import_pg_core","import_pg_core","import_drizzle_orm","import_zod_openapi","import_zod","pg","import_zod","app","import_hono","import_hono_openapi","import_zod","import_zod","app","app","app"]}